package net.minecraft.client.audio;

import static org.lwjgl.openal.ALC10.*;
import static org.lwjgl.stb.STBVorbis.*;
import static org.lwjgl.system.MemoryUtil.*;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

import org.apache.commons.compress.utils.IOUtils;
import org.lwjgl.openal.AL;
import org.lwjgl.openal.ALC;
import org.lwjgl.openal.ALCCapabilities;
import org.lwjgl.openal.ALCapabilities;

import net.minecraft.client.Minecraft;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.entity.player.EntityPlayer;

public class SoundManager {

	private static final String __OBFID = "CL_00001141";

	private long alContext;
	private long alDevice;

	private ALCCapabilities alcCapabilities;
	private ALCapabilities alCapabilities;

	private SoundHandler soundHandler;
	private GameSettings gameSettings;

	public SoundManager(SoundHandler soundHandler, GameSettings gameSettings) {

		this.soundHandler = soundHandler;
		this.gameSettings = gameSettings;

		initializeOpenAL();

		System.out.println("SoundSystem created by CodeMajorGeek started !");
	}

	public void reloadSoundSystem() {

		cleanUpOpenAL();
		initializeOpenAL();

		System.out.println("SoundSystem reloaded !");
	}

	public void playSound(ISound sound) {
		
		File soundFile = null;
		
		IntBuffer channelsBuffer = memAllocInt(1);
		IntBuffer sampleRateBuffer = memAllocInt(1);
		
		ByteBuffer soundData = null;
		try {
			soundData = byteBufferFromInputStream(Minecraft.getMinecraft().getResourceManager().getResource(sound.func_147650_b()).getInputStream());
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		ShortBuffer rawAudioBuffer = stb_vorbis_decode_memory(soundData, channelsBuffer, sampleRateBuffer);
	}

	public void addDelayedSound(ISound sound, int delay) {

	}

	public void setListener(EntityPlayer player, float val) {

	}

	public void pauseAllSounds() {

	}

	public void stopAllSounds() {

	}

	public void unloadSoundSystem() {

	}

	public void updateAllSounds() {

	}

	public void resumeAllSounds() {

	}

	public void setSoundCategoryVolume(SoundCategory soundCategory, float level) {

	}

	public void stopSound(ISound sound) {

	}

	public boolean isSoundPlaying(ISound sound) {

		return true;
	}

	private void initializeOpenAL() {

		final String defaultDeviceName = alcGetString(0, ALC_DEFAULT_DEVICE_SPECIFIER);
		alDevice = alcOpenDevice(defaultDeviceName);

		int[] attributes = { 0 };
		alContext = alcCreateContext(alDevice, attributes);
		alcMakeContextCurrent(alContext);

		alcCapabilities = ALC.createCapabilities(alDevice);
		alCapabilities = AL.createCapabilities(alcCapabilities);
	}

	private void cleanUpOpenAL() {

		alcDestroyContext(alContext);
		alcCloseDevice(alDevice);
	}
	
	private ByteBuffer byteBufferFromInputStream(InputStream inputStream) throws IOException {
		
		byte[] bytes = IOUtils.toByteArray(inputStream);
		return ByteBuffer.wrap(bytes);
	}
}
