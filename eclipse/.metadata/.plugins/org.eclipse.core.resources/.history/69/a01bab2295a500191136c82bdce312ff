package net.minecraft.client.audio;

import static org.lwjgl.openal.AL10.*;
import static org.lwjgl.openal.ALC10.*;
import static org.lwjgl.stb.STBVorbis.*;
import static org.lwjgl.system.MemoryUtil.*;

import java.io.File;
import java.io.IOException;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.openal.AL;
import org.lwjgl.openal.ALC;
import org.lwjgl.openal.ALCCapabilities;
import org.lwjgl.openal.ALCapabilities;

import net.minecraft.client.Minecraft;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.entity.player.EntityPlayer;

public class SoundManager {

	private static final String __OBFID = "CL_00001141";

	private long alContext;
	private long alDevice;

	private ALCCapabilities alcCapabilities;
	private ALCapabilities alCapabilities;

	private static final Logger LOGGER = LogManager.getLogger();
	private SoundHandler soundHandler;
	private GameSettings gameSettings;
	
	private List<Integer> alSourceCurrentlyPlaying = new ArrayList<Integer>();

	public SoundManager(SoundHandler soundHandler, GameSettings gameSettings) {

		this.soundHandler = soundHandler;
		this.gameSettings = gameSettings;

		initializeOpenAL();

		LOGGER.info("SoundSystem created by CodeMajorGeek started !");
	}

	public void reloadSoundSystem() {

		cleanUpOpenAL();
		initializeOpenAL();

		LOGGER.info("SoundSystem reloaded !");
	}

	public void playSound(ISound sound) {

		int sourcePointer = loadSoundInOpenAL(sound);
		alSourcePlay(sourcePointer);
		
		alSourceCurrentlyPlaying.add(sourcePointer);
	}

	public void addDelayedSound(ISound sound, int delay) {

	}

	public void setListener(EntityPlayer player, float val) {

	}

	public void pauseAllSounds() {

	}

	public void stopAllSounds() {

	}

	public void unloadSoundSystem() {

	}

	public void updateAllSounds() {
		
		
	}

	public void resumeAllSounds() {

	}

	public void setSoundCategoryVolume(SoundCategory soundCategory, float level) {

	}

	public void stopSound(ISound sound) {

	}

	public boolean isSoundPlaying(ISound sound) {

		return true;
	}

	private void initializeOpenAL() {

		final String defaultDeviceName = alcGetString(0, ALC_DEFAULT_DEVICE_SPECIFIER);
		alDevice = alcOpenDevice(defaultDeviceName);

		int[] attributes = { 0 };
		alContext = alcCreateContext(alDevice, attributes);
		alcMakeContextCurrent(alContext);

		alcCapabilities = ALC.createCapabilities(alDevice);
		alCapabilities = AL.createCapabilities(alcCapabilities);

		LOGGER.info("OpenAL initialized !");
	}

	private void cleanUpOpenAL() {

		alcDestroyContext(alContext);
		alcCloseDevice(alDevice);
	}

	private File getSoundFile(ISound sound) {

		SoundEventAccessorComposite soundEventAcessorComposite = soundHandler.func_147680_a(sound.func_147650_b());
		SoundPoolEntry soundPoolEntry = soundEventAcessorComposite.func_148720_g();

		try {

			return Minecraft.getMinecraft().getDefaultRessourcePack().getFile(soundPoolEntry.func_148652_a());
		} catch (IOException e) {

			e.printStackTrace();
			return null;
		}
	}

	private int loadSoundInOpenAL(ISound sound) {

		File soundFile = getSoundFile(sound);

		IntBuffer channelsBuffer = memAllocInt(1);
		IntBuffer sampleRateBuffer = memAllocInt(1);

		int format = -1;
		ShortBuffer rawAudioBuffer = stb_vorbis_decode_filename(soundFile.getAbsolutePath(), channelsBuffer,
				sampleRateBuffer);

		if (channelsBuffer.get(0) == 1)
			format = AL_FORMAT_MONO16;
		else if (channelsBuffer.get(0) == 2)
			format = AL_FORMAT_STEREO16;

		int bufferPointer = alGenBuffers();
		alBufferData(bufferPointer, format, rawAudioBuffer, sampleRateBuffer.get(0));

		memFree(rawAudioBuffer);
		
		int sourcePointer = alGenSources();
		alSourcei(sourcePointer, AL_BUFFER, bufferPointer);
		
		return sourcePointer;
	}
}
