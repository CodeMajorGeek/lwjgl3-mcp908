package fr.lwjgl3binding.display;

import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.system.MemoryUtil.*;

import java.nio.ByteBuffer;

import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.GLUtil;

public class Display {
	
	private static long windowId;
	
	private static DisplayMode displayMode;
	private static boolean created = false;
	
	public static void create(int width, int height, String title) throws RuntimeException {
		
		if(!glfwInit())
			throw new RuntimeException("Can't initialize GLFW !");
		
		windowId = glfwCreateWindow(width, height, title, NULL, NULL);
		
		if(windowId == NULL) {
			
			glfwTerminate();
			throw new RuntimeException("Can't create GLFW window !");
		} else
			created = true;
		
		glfwMakeContextCurrent(windowId);
		GL.createCapabilities();
		
		GLUtil.setupDebugMessageCallback();
	}
	
	public static void destroy() {
		
		glfwSetWindowShouldClose(windowId, true);
		glfwDestroyWindow(windowId);
		glfwTerminate();
	}
	
	public static void setFullscreen(boolean fullscreen) {

	}

	public static void setDisplayMode(DisplayMode displayMode) {
		Display.displayMode = displayMode;
	}

	public static void setResizable(boolean resizable) {
		glfwWindowHint(GLFW_RESIZABLE, resizable ? GLFW_TRUE : GLFW_FALSE);
	}

	public static void setVSyncEnabled(boolean vSyncEnabled) {
		glfwSwapInterval(vSyncEnabled ? GLFW_TRUE : GLFW_FALSE);
	}
	
	public static void setTitle(String title) {
		glfwSetWindowTitle(windowId, title);
	}
	
	public static void setIcon(ByteBuffer[] iconBuffers) {
		
	}

	public static DisplayMode getDisplayMode() {
		return displayMode;
	}
	
	public static boolean isCreated() {
		return created;
	}
	
	public static boolean isCloseRequested() {
		return glfwWindowShouldClose(windowId);
	}
}
